
#include "main.h"


HRESULT myDXGISwapChain::SetPrivateData(REFGUID  Name, UINT  DataSize, const void *  pData)
{
    if(g_logger->logInterfaceCalls) g_logger->log("Interface call: SetPrivateData");

	HRESULT result = base->SetPrivateData(Name, DataSize, pData);

	return result;
}


HRESULT myDXGISwapChain::SetPrivateDataInterface(REFGUID  Name, const IUnknown *  pUnknown)
{
    if(g_logger->logInterfaceCalls) g_logger->log("Interface call: SetPrivateDataInterface");

	HRESULT result = base->SetPrivateDataInterface(Name, pUnknown);

	return result;
}


HRESULT myDXGISwapChain::GetPrivateData(REFGUID  Name, _Inout_ UINT *  pDataSize, void *  pData)
{
    if(g_logger->logInterfaceCalls) g_logger->log("Interface call: GetPrivateData");

	HRESULT result = base->GetPrivateData(Name, pDataSize, pData);

	return result;
}


HRESULT myDXGISwapChain::GetParent(REFIID  riid, void * *  ppParent)
{
    if(g_logger->logInterfaceCalls) g_logger->log("Interface call: GetParent");

	HRESULT result = base->GetParent(riid, ppParent);

	return result;
}


HRESULT myDXGISwapChain::GetDevice(REFIID  riid, void * *  ppDevice)
{
    if(g_logger->logInterfaceCalls) g_logger->log("Interface call: GetDevice");

	HRESULT result = base->GetDevice(riid, ppDevice);

	return result;
}


HRESULT myDXGISwapChain::Present(UINT  SyncInterval, UINT  Flags)
{
    if(g_logger->logInterfaceCalls) g_logger->log("Interface call: Present");

	HRESULT result = base->Present(SyncInterval, Flags);

	return result;
}


HRESULT myDXGISwapChain::GetBuffer(UINT  Buffer, REFIID  riid, void * *  ppSurface)
{
    if(g_logger->logInterfaceCalls) g_logger->log("Interface call: GetBuffer");

	HRESULT result = base->GetBuffer(Buffer, riid, ppSurface);

	return result;
}


HRESULT myDXGISwapChain::SetFullscreenState(BOOL  Fullscreen, IDXGIOutput *  pTarget)
{
    if(g_logger->logInterfaceCalls) g_logger->log("Interface call: SetFullscreenState");

	HRESULT result = base->SetFullscreenState(Fullscreen, pTarget);

	return result;
}


HRESULT myDXGISwapChain::GetFullscreenState(BOOL *  pFullscreen, IDXGIOutput * *  ppTarget)
{
    if(g_logger->logInterfaceCalls) g_logger->log("Interface call: GetFullscreenState");

	HRESULT result = base->GetFullscreenState(pFullscreen, ppTarget);

	return result;
}


HRESULT myDXGISwapChain::GetDesc(DXGI_SWAP_CHAIN_DESC *  pDesc)
{
    if(g_logger->logInterfaceCalls) g_logger->log("Interface call: GetDesc");

	HRESULT result = base->GetDesc(pDesc);

	return result;
}


HRESULT myDXGISwapChain::ResizeBuffers(UINT  BufferCount, UINT  Width, UINT  Height, DXGI_FORMAT  NewFormat, UINT  SwapChainFlags)
{
    if(g_logger->logInterfaceCalls) g_logger->log("Interface call: ResizeBuffers");

	HRESULT result = base->ResizeBuffers(BufferCount, Width, Height, NewFormat, SwapChainFlags);

	return result;
}


HRESULT myDXGISwapChain::ResizeTarget(const DXGI_MODE_DESC *  pNewTargetParameters)
{
    if(g_logger->logInterfaceCalls) g_logger->log("Interface call: ResizeTarget");

	HRESULT result = base->ResizeTarget(pNewTargetParameters);

	return result;
}


HRESULT myDXGISwapChain::GetContainingOutput(IDXGIOutput * *  ppOutput)
{
    if(g_logger->logInterfaceCalls) g_logger->log("Interface call: GetContainingOutput");

	HRESULT result = base->GetContainingOutput(ppOutput);

	return result;
}


HRESULT myDXGISwapChain::GetFrameStatistics(DXGI_FRAME_STATISTICS *  pStats)
{
    if(g_logger->logInterfaceCalls) g_logger->log("Interface call: GetFrameStatistics");

	HRESULT result = base->GetFrameStatistics(pStats);

	return result;
}


HRESULT myDXGISwapChain::GetLastPresentCount(UINT *  pLastPresentCount)
{
    if(g_logger->logInterfaceCalls) g_logger->log("Interface call: GetLastPresentCount");

	HRESULT result = base->GetLastPresentCount(pLastPresentCount);

	return result;
}

